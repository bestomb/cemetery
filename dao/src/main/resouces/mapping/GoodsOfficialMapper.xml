<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bestomb.dao.IGoodsOfficialDao">
    <resultMap id="BaseResultMap" type="com.bestomb.entity.GoodsOfficial">
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="price" jdbcType="DECIMAL" property="price" />
        <result column="images" jdbcType="VARCHAR" property="images" />
        <result column="type" jdbcType="INTEGER" property="type" />
        <result column="lifecycle" jdbcType="INTEGER" property="lifecycle" />
        <result column="second_classify_id" jdbcType="INTEGER" property="secondClassifyId" />
        <result column="second_classify_name" jdbcType="VARCHAR" property="secondClassifyName" />
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.bestomb.entity.GoodsOfficialWithBLOBs">
        <result column="description" jdbcType="LONGVARCHAR" property="description" />
        <result column="extend_attribute" jdbcType="LONGVARCHAR" property="extendAttribute" />
    </resultMap>
    <sql id="Base_Column_List">
        id, name, price, images, type, lifecycle
    </sql>
    <sql id="Blob_Column_List">
        description, extend_attribute
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        go.id, go.name, go.price, go.images, go.type, go.lifecycle , go.description, go.extend_attribute ,sc.id as second_classify_id, sc.name second_classify_name
        from goods_official go left join second_classification_goods_relat scgr on (go.id = scgr.goods_id)
        left join second_classification sc on (scgr.classification_id = sc.id)
        where go.id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from goods_official
        where id IN
        <foreach item="item" collection="id" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <insert id="insert" parameterType="com.bestomb.entity.GoodsOfficialWithBLOBs">
        <selectKey keyProperty="id" order="BEFORE" resultType="String">
            select replace(uuid(),'-','') from dual
        </selectKey>
        insert into goods_official (id, name, price,
        images, type, lifecycle,
        description, extend_attribute)
        values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{price,jdbcType=DECIMAL},
        #{images,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{lifecycle,jdbcType=INTEGER},
        #{description,jdbcType=LONGVARCHAR}, #{extendAttribute,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.bestomb.entity.GoodsOfficialWithBLOBs">
        <selectKey keyProperty="id" order="BEFORE" resultType="String">
            select replace(uuid(),'-','') from dual
        </selectKey>
        insert into goods_official
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="price != null">
                price,
            </if>
            <if test="images != null">
                images,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="lifecycle != null">
                lifecycle,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="extendAttribute != null">
                extend_attribute,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="price != null">
                #{price,jdbcType=DECIMAL},
            </if>
            <if test="images != null">
                #{images,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="lifecycle != null">
                #{lifecycle,jdbcType=INTEGER},
            </if>
            <if test="description != null">
                #{description,jdbcType=LONGVARCHAR},
            </if>
            <if test="extendAttribute != null">
                #{extendAttribute,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.bestomb.entity.GoodsOfficialWithBLOBs">
        update goods_official
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="price != null">
                price = #{price,jdbcType=DECIMAL},
            </if>
            <if test="images != null">
                images = #{images,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="lifecycle != null">
                lifecycle = #{lifecycle,jdbcType=INTEGER},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=LONGVARCHAR},
            </if>
            <if test="extendAttribute != null">
                extend_attribute = #{extendAttribute,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.bestomb.entity.GoodsOfficialWithBLOBs">
        update goods_official
        set name = #{name,jdbcType=VARCHAR},
        price = #{price,jdbcType=DECIMAL},
        images = #{images,jdbcType=VARCHAR},
        type = #{type,jdbcType=INTEGER},
        lifecycle = #{lifecycle,jdbcType=INTEGER},
        description = #{description,jdbcType=LONGVARCHAR},
        extend_attribute = #{extendAttribute,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.bestomb.entity.GoodsOfficial">
        update goods_official
        set name = #{name,jdbcType=VARCHAR},
        price = #{price,jdbcType=DECIMAL},
        images = #{images,jdbcType=VARCHAR},
        type = #{type,jdbcType=INTEGER},
        lifecycle = #{lifecycle,jdbcType=INTEGER}
        where id = #{id,jdbcType=VARCHAR}
    </update>

    <!-- 封装分页查询表名 -->
    <sql id="pageQueryTable">goods_official</sql>
    <!-- 封装商城商品查询条件 -->
    <sql id="whereCondition">
        <where>
            <if test="mall.name != null">
                and name like '%${mall.name,jdbcType=VARCHAR}%'
            </if>
            <if test="mall.type != null">
                and type = #{mall.type,jdbcType=INTEGER}
            </if>
        </where>
    </sql>
    <!-- 根据条件查询分页列表总数 -->
    <select id="getPageListCount" resultType="java.lang.Integer">
        select count(1) from
        <include refid="pageQueryTable" />
        <include refid="whereCondition" />
    </select>
    <!-- 根据条件查询分页列表 -->
    <select id="getPageList" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from
        <include refid="pageQueryTable" />
        <include refid="whereCondition" />
        limit ${page.start}, ${page.pageSize}
    </select>

    <!-- 根据商品编号集合查找商品信息集合 -->
    <select id="selectByIds" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from goods_official
        where id IN
        <foreach close=")" collection="goodsIds" item="item" open="(" separator=",">
            #{item}
        </foreach>
    </select>
</mapper>